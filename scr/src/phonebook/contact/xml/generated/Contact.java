//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.01.15 at 05:04:24 PM MSK 
//


package phonebook.contact.xml.generated;

import com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl;
import phonebook.contact.AbstractContact;

import java.util.*;
import javax.xml.bind.annotation.*;
import javax.xml.datatype.XMLGregorianCalendar;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="contactID" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="contactsName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="address" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="dateOfCreating" type="{http://www.w3.org/2001/XMLSchema}time"/>
 *         &lt;sequence>
 *           &lt;element ref="{}phoneNumber" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;/sequence>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "contactID",
    "contactsName",
    "address",
    "dateOfCreating",
    "phoneNumber",
    "defaultNumberId"
})
@XmlRootElement(name = "contact")
public class Contact extends AbstractContact{

    private int contactID;
    @XmlElement(required = true)
    private String contactsName;
    @XmlElement(required = true)
    private String address;
    @XmlElement(required = true)
    @XmlSchemaType(name = "dateTime")
    private XMLGregorianCalendar dateOfCreating;
    private List<PhoneNumber> phoneNumber;
    private int defaultNumberId;

    @XmlTransient
    private IDGen idGen = new IDGen();

    Contact() {}

    Contact(int id, String name) {
        contactID = id;
        contactsName = name;
        address = "";
        dateOfCreating = new XMLGregorianCalendarImpl(new GregorianCalendar());
    }

    int getContactID() {
        return contactID;
    }

    /**
     * Gets the value of the phoneNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the phoneNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhoneNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PhoneNumber }
     * 
     * 
     */
    public List<PhoneNumber> getPhoneNumber() {
        if (phoneNumber == null) {
            phoneNumber = new ArrayList<PhoneNumber>();
        }
        return this.phoneNumber;
    }

    public void setDefaultNumberId(int id) {
        defaultNumberId = id;
    }

    public int getDefaultNumberId() {
        return defaultNumberId;
    }

    @Override
    public int getId() {
        return contactID;
    }

    @Override
    public List<phonebook.contact.PhoneNumber> getNumbers() {
        return new ArrayList<>(getPhoneNumber());
    }

    @Override
    public int lengthOfNumbersList() {
        return getPhoneNumber().size();
    }

    @Override
    public void addNumber(String phoneNumber, String description) {
        int id = idGen.newId();
        PhoneNumber ph = new PhoneNumber((id), phoneNumber, description);
        if(this.phoneNumber == null) {
            this.phoneNumber = new ArrayList<>();
        }
        if(getDefaultNumberId() == 0) {
            setDefaultNumberId(id);
        }
        this.phoneNumber.add(ph);
    }

    @Override
    public void addNumber(String phoneNumber) {
        addNumber(phoneNumber, "");
    }

    @Override
    public phonebook.contact.PhoneNumber getNumber(String number) {
        for(PhoneNumber ph : phoneNumber)
            if(number.matches(ph.getNumber()))
                return ph;
        return null;
    }

    @Override
    public phonebook.contact.PhoneNumber detNumberByDescription(String description) {
        for(PhoneNumber ph : phoneNumber)
            if(description.matches(ph.getDescription()))
                return ph;
        return null;
    }

    @Override
    public phonebook.contact.PhoneNumber getNumber(int id) {
        for(PhoneNumber ph : phoneNumber)
            if(id == ph.getId())
                return ph;
        return null;
    }

    @Override
    public Calendar getUploadDate() {
        if(dateOfCreating != null)
            return dateOfCreating.toGregorianCalendar();
        return null;
    }

    @Override
    public void setName(String name) {
        contactsName = name;
    }

    @Override
    public String getName() {
        return contactsName;
    }

    @Override
    public String getAddress() {
        return address;
    }

    @Override
    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public phonebook.contact.PhoneNumber getDefoultNumber() {
        if(getDefaultNumberId() > 0)
            return getNumber(getDefaultNumberId());
        return null;
    }

    @Override
    public void setDefoultNumber(int id) {
        setDefaultNumberId(id);
    }

    @Override
    public void setDefoultNumber(phonebook.contact.PhoneNumber phoneNumber) {
        setDefaultNumberId(phoneNumber.getId());
    }

    @Override
    public void removeNumber(int id) {
        phonebook.contact.PhoneNumber target = getNumber(id);
        if(target == null)
            return;
        getPhoneNumber().remove(target);
        if(id == getDefaultNumberId()) {
            if(getPhoneNumber().size() == 0)
                setDefaultNumberId(0);
            else {
                setDefaultNumberId(getPhoneNumber().get(0).getId());
            }
        }
        idGen.removeId(id);
    }

    @Override
    public void removeNumber(phonebook.contact.PhoneNumber phoneNumber) {
        removeNumber(phoneNumber.getId());
    }

    private class IDGen {
        boolean hasBeanInitialized = false;

        SortedSet<Integer> idList = new TreeSet<>();

        public int newId() {
            if(!hasBeanInitialized) {
                initialize();
            }
            int result;
            if(idList.size() > 0) {
                result = idList.last();
                result++;
            } else {
                result = 1;
            }

            idList.add(result);
            return result;
        }

        public void removeId(int id) {
            if(!hasBeanInitialized) {
                initialize();
            }
            idList.remove(id);
        }
        private void initialize() {
            if(hasBeanInitialized)
                return;
            for(PhoneNumber ph : getPhoneNumber()) {
                idList.add(ph.getNumberID());
            }

            hasBeanInitialized = true;
        }
    };
}
